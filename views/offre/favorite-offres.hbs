<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Favorite Offers</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
  {{> header1}}

  <main class="flex-grow container mx-auto px-4 py-10">
    <div class="bg-white rounded-3xl shadow-2xl p-10">
      <h1 class="text-4xl font-extrabold text-center text-gray-800 mb-12">⭐ Favoris offres</h1>

      <div class="overflow-x-auto">
        <table id="favorites-table" class="min-w-full table-auto border-separate border-spacing-y-2">
          <thead>
            <tr class="bg-gray-50">
              <th class="px-6 py-4 text-left text-md font-semibold text-gray-700">Offre</th>
              <th class="px-6 py-4 text-left text-md font-semibold text-gray-700">Domaine</th>
              <th class="px-6 py-4 text-left text-md font-semibold text-gray-700"> Date debut</th>
              <th class="px-6 py-4 text-left text-md font-semibold text-gray-700"> Date fin</th>
              <th class="px-6 py-4 text-center text-md font-semibold text-gray-700">Actions</th>
            </tr>
          </thead>
          <tbody id="favorites-tbody" class="bg-white">
            <!-- Dynamic rows go here -->
          </tbody>
        </table>
      </div>
    </div>
  </main>

  <script>
    function displayFavorites(user_id) {
      fetch(`/favorites/${user_id}`)
        .then(response => response.json())
        .then(data => {
          const tableBody = document.getElementById('favorites-tbody');
          tableBody.innerHTML = '';

          data.forEach(offre => {
            const row = document.createElement('tr');
            row.id = `offre-${offre.id}`;
            row.className = "hover:bg-gray-100 transition rounded-lg";

            row.innerHTML = `
              <td class="px-6 py-4 bg-white shadow-sm rounded-l-lg">${offre.titre}</td>
              <td class="px-6 py-4 bg-white shadow-sm">${offre.domaine}</td>
              <td class="px-6 py-4 bg-white shadow-sm">${formatDate(offre.date_creation)}</td>
              <td class="px-6 py-4 bg-white shadow-sm">${formatDate(offre.date_fin)}</td>
              <td class="px-6 py-4 bg-white shadow-sm rounded-r-lg text-center">
                <button 
                  onclick="confirmDelete('${user_id}', '${offre.id}')" 
                  class="bg-red-500 hover:bg-red-600 text-white text-sm font-bold py-2 px-5 rounded-full shadow-lg transition duration-300"
                >
                 supprimer
                </button>
              </td>
            `;
            tableBody.appendChild(row);
          });
        })
        .catch(error => {
          console.error('Error fetching favorites:', error);
        });
    }

 
 function confirmDelete(user_id, offre_id) {
  Swal.fire({
    title: 'Êtes-vous sûr(e) ?',
    text: "Cette action est irréversible !",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'No, cancel!',
    customClass: {
      popup: 'rounded-2xl p-8',
      title: 'text-2xl font-bold text-gray-800',
      htmlContainer: 'text-gray-600 text-md',
      confirmButton: 'bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-full mr-2',
      cancelButton: 'bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full'
    },
    buttonsStyling: false, // disable SweetAlert default styles
    reverseButtons: true // puts cancel button on the left
  }).then((result) => {
    if (result.isConfirmed) {
      deleteFavorite(user_id, offre_id);
    }
  });
}

    function deleteFavorite(user_id, offre_id) {
      fetch(`/favorites`, {
        method: 'DELETE',
        body: JSON.stringify({ user_id, offre_id }),
        headers: {
          'Content-Type': 'application/json'
        }
      })
      .then(response => {
        if (response.ok) {
         Swal.fire(
           'Supprimé !',
           'L\'offre a été supprimée.',
           'success'
);
          const row = document.getElementById(`offre-${offre_id}`);
          row.remove();
        } else {
          Swal.fire(
          'Erreur !',
          'Échec de la suppression de l\'offre.',
          'error'
);
        }
      })
      .catch(error => {
        console.error("Error deleting favorite offer:", error);
       Swal.fire(
        'Erreur !',
       'Une erreur inattendue est survenue.',
       'error'
);
      });
    }

    function formatDate(date) {
      const d = new Date(date);
      return `${d.getDate().toString().padStart(2, '0')}/${(d.getMonth() + 1).toString().padStart(2, '0')}/${d.getFullYear()}`;
    }

    const user_id = localStorage.getItem("userId");
    displayFavorites(user_id);
  </script>
