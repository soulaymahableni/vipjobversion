<!DOCTYPE html>
<html lang="fr">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VipJob.tn - Votre Profil Professionnel</title>

  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- Alpine.js pour les interactions -->
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>

<body class="min-h-screen flex flex-col bg-gradient-to-b from-blue-50 to-white">
  <!-- Éléments d'arrière-plan -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div
      class="animate-pulse-slow absolute top-20 -left-32 w-96 h-96 bg-gray-400 rounded-full mix-blend-multiply filter blur-3xl opacity-20">
    </div>
    <div
      class="animate-pulse-slow animation-delay-2000 absolute bottom-20 -right-32 w-96 h-96 bg-gray-400 rounded-full mix-blend-multiply filter blur-3xl opacity-30">
    </div>
  </div>


  <!-- Header -->
  {{> header1 }} <!-- Include header partial -->

  <!-- Main Content - Profile Form -->
  <main class="flex-grow pt-28 pb-16 px-6 relative z-10">
    <section class="py-12">
      <div class="container mx-auto max-w-4xl">
        <div class="mb-12 text-center animate-slide-up">
          <h1 class="text-3xl md:text-4xl font-bold mb-4 text-gray-900">Votre Profil Professionnel</h1>

          <p class="text-muted-foreground max-w-2xl mx-auto">
            Personnalisez votre profil pour recevoir des offres d'emploi adaptées à vos compétences et préférences
            directement par SMS.
          </p>
        </div>

        <div class="glass-card hover-glow rounded-xl p-8 md:p-10 animate-fade-in shadow-lg border border-blue-100">
          <div class="flex flex-col items-center text-center mb-6">
            <img src="/assets/img/image.png" alt="Profile Picture" id="profile-img"
              class="rounded-full w-32 h-32 border-4 mb-4 transition-transform duration-300 hover:scale-105 ring ring-gray-300">
            <input type="file" name="profile" id="upload_profile" hidden required onchange="updateProfilePicture()">
            <label for="upload_profile"
              class="px-5 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 cursor-pointer transition-colors duration-300">
              Changer la photo de profil
            </label>
          </div>
          <form id="profilForm" class="space-y-8" x-data="{ 
            skills: ['JavaScript', 'React', 'Node.js', 'HTML/CSS'],
            newSkill: '',
            addSkill(e) {
              e.preventDefault();
              if (this.newSkill && !this.skills.includes(this.newSkill)) {
                this.skills.push(this.newSkill);
                this.newSkill = '';
              }
            },
            removeSkill(skill) {
              this.skills = this.skills.filter(s => s !== skill);
            }
          }" method="POST" action="/profil{{utilisateur.id}}">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="space-y-3 animate-fade-in animation-delay-500">
                <label for="firstName" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
                    <circle cx="12" cy="7" r="4" />
                  </svg>
                  Prénom
                </label>
                <input id="prenom" name="prenom" type="text" placeholder="Votre prénom"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800"
                  value="{{utilisateur.prenom}}" required>
              </div>

              <div class="space-y-3 animate-fade-in animation-delay-500">
                <label for="lastName" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
                    <circle cx="12" cy="7" r="4" />
                  </svg>
                  Nom
                </label>
                <input id="nom" name="nom" type="text" placeholder="Votre nom"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800"
                  value="{{utilisateur.nom}}" required>
              </div>

              <div class="space-y-3 animate-fade-in animation-delay-1000">
                <label for="email" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path
                      d="M22 18.9c0 .6-.4 1.1-1 1.1H3c-.6 0-1-.5-1-1.1v-11c0-.6.4-1.1 1-1.1h4l1.7-1.7C9 4.8 9.5 4.7 10 4.7h4c.5 0 1 .1 1.3.4L17 6.8h4c.6 0 1 .5 1 1.1v11Z" />
                    <circle cx="12" cy="13" r="3" />
                  </svg>
                  Email
                </label>
                <input id="email" name="email" type="email" placeholder="votre.email@exemple.com"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  value="{{utilisateur.email}}" required>
              </div>

              <div class="space-y-3 animate-fade-in animation-delay-1000">
                <label for="phone" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path
                      d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
                  </svg>
                  Téléphone
                </label>
                <input id="telephone" name="telephone" type="text" placeholder="+216 XX XXX XXX"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800"
                  value="{{utilisateur.telephone}}" required>
              </div>

              <div class="space-y-3 md:col-span-2 animate-fade-in animation-delay-1000">
                <label for="title" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 12h-4l-3 9L9 3l-3 9H2" />
                  </svg>
                  Domaine
                </label>
                <input id="domaine" name="domaine" type="text" placeholder="Ex: Développeur Web, Designer UX/UI"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800"
                  value="{{utilisateur.domaine}}">
              </div>

              <div class="space-y-3 animate-fade-in animation-delay-1000">
                <label for="experience" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 12h-4l-3 9L9 3l-3 9H2" />
                  </svg>
                  Années d'expérience
                </label>
                <select id="experience"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800">
                  <option value="" disabled selected>Sélectionnez</option>
                  <option value="entry">Débutant (0-1 an)</option>
                  <option value="junior">Junior (1-3 ans)</option>
                  <option value="mid">Intermédiaire (3-5 ans)</option>
                  <option value="senior">Sénior (5+ ans)</option>
                  <option value="expert">Expert (10+ ans)</option>
                </select>
              </div>

              <div class="space-y-3 animate-fade-in animation-delay-1000">
                <label for="diplome" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 10v6M2 10l10-5 10 5-10 5z" />
                    <path d="M6 12v5c3 3 9 3 12 0v-5" />
                  </svg>
                  Diplôme
                </label>
                <input id="diplome" name="diplome" type="text" placeholder="Ex: Licence en Informatique"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800">
              </div>




              <div class="space-y-3 md:col-span-2 animate-fade-in animation-delay-1000">
                <label for="skills" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m16 18 2-2v-3" />
                    <path d="m8 18-2-2v-3" />
                    <path d="M12 18v-3" />
                    <path d="M20 7h-3a2 2 0 0 1 0-4h3" />
                    <path d="M4 7h3a2 2 0 0 0 0-4H4" />
                    <path d="M12 7v4" />
                  </svg>
                  Compétences
                </label>
                <div class="flex flex-wrap gap-2 mb-3">
                  <template x-for="skill in skills" :key="skill">
                    <div
                      class="py-1.5 pl-3 pr-2 flex items-center gap-1 bg-blue-100 hover:bg-blue-200 text-gray-900 rounded-md transition-colors">
                      <span x-text="skill"></span>
                      <button type="button" @click="removeSkill(skill)"
                        class="text-gray-800 hover:text-gray-900 rounded-full">
                        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none"
                          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M18 6 6 18" />
                          <path d="m6 6 12 12" />
                        </svg>
                      </button>
                    </div>
                  </template>
                </div>
                <div class="flex gap-2">
                  <input x-model="newSkill" placeholder="Ajouter une compétence"
                    class="h-12 flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800">
                  <button type="button" @click="addSkill"
                    class="h-12 px-4 bg-gray-800 hover:bg-gray-800 text-white rounded-md transition-colors flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <circle cx="12" cy="12" r="10" />
                      <path d="M12 8v8" />
                      <path d="M8 12h8" />
                    </svg>
                    Ajouter
                  </button>
                </div>
              </div>
              <!-- Nouveau champ Gouvernorat -->
              <div class="space-y-3 animate-fade-in animation-delay-1000">
                <label for="governorate" class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
                    <circle cx="12" cy="10" r="3" />
                  </svg>
                  Gouvernorat
                </label>
                <select id="gouvernorat" name="gouvernorat"
                  class="h-12 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800"
                  value="{{utilisateur.gouvernorat}}" required>
                  <option value="" disabled selected>Sélectionnez votre gouvernorat</option>
                  <option value="tunis">Tunis</option>
                  <option value="ariana">Ariana</option>
                  <option value="ben_arous">Ben Arous</option>
                  <option value="mannouba">La Mannouba</option>
                  <option value="nabeul">Nabeul</option>
                  <option value="zaghouan">Zaghouan</option>
                  <option value="bizerte">Bizerte</option>
                  <option value="beja">Béja</option>
                  <option value="jendouba">Jendouba</option>
                  <option value="kef">Le Kef</option>
                  <option value="siliana">Siliana</option>
                  <option value="sousse">Sousse</option>
                  <option value="monastir">Monastir</option>
                  <option value="mahdia">Mahdia</option>
                  <option value="sfax">Sfax</option>
                  <option value="kairouan">Kairouan</option>
                  <option value="kasserine">Kasserine</option>
                  <option value="sidi_bouzid">Sidi Bouzid</option>
                  <option value="gabes">Gabès</option>
                  <option value="medenine">Médenine</option>
                  <option value="tataouine">Tataouine</option>
                  <option value="gafsa">Gafsa</option>
                  <option value="tozeur">Tozeur</option>
                  <option value="kebili">Kébili</option>
                </select>
              </div>
              <div class="space-y-3 md:col-span-2 animate-fade-in animation-delay-1000">
                <div class="max-w-2xl mx-auto mt-10">
                  <label for="bio" class="block text-lg font-semibold mb-2">À propos de vous</label>
                  <textarea id="bio" placeholder="Parlez-nous de votre expérience, vos objectifs professionnels..."
                    class="min-h-[120px] w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-800 focus:border-gray-800"></textarea>




                  <div id="result" class="mt-6 p-4 bg-gray-100 border rounded-md hidden"></div>

                  <button id="saveButton" onclick="saveBioToDB(event)"
                    class="mt-4 px-5 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition">
                    Save Bio
                  </button>
                  <button onclick="generateBio(event)"
                    class="mt-4 px-5 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition">
                    Générer avec AI
                  </button>
                </div>
              </div>

              <div class="space-y-3 animate-fade-in animation-delay-1000">
                <label class="flex items-center text-sm font-medium">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 mr-2 text-gray-800" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10" />
                    <path d="M2 12h20" />
                    <path
                      d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" />
                  </svg>
                  Langues
                </label>
                <div class="space-y-2">
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" name="languages" value="french"
                      class="h-4 w-4 text-gray-800 border-gray-300 rounded focus:ring-gray-800">
                    <span>Français</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" name="languages" value="english"
                      class="h-4 w-4 text-gray-800 border-gray-300 rounded focus:ring-gray-800">
                    <span>Anglais</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" name="languages" value="german"
                      class="h-4 w-4 text-gray-800 border-gray-300 rounded focus:ring-gray-800">
                    <span>Allemand</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" name="languages" value="spanish"
                      class="h-4 w-4 text-gray-800 border-gray-300 rounded focus:ring-gray-800">
                    <span>Espagnol</span>
                  </label>
                  <label class="flex items-center space-x-2">
                    <input type="checkbox" name="languages" value="arabic"
                      class="h-4 w-4 text-gray-800 border-gray-300 rounded focus:ring-gray-800">
                    <span>Arabe</span>
                  </label>
                </div>
              </div>



              <div class="space-y-3 md:col-span-2 animate-fade-in animation-delay-1000">
                <div class="flex items-center space-x-2 group">
                  <input type="checkbox" id="notifications" checked
                    class="rounded border-gray-600 text-gray-700 focus:ring-gray-800">
                  <label for="notifications" class="text-sm font-medium group-hover:text-gray-900 transition-colors">
                    Recevoir des alertes d'emploi par SMS
                  </label>
                </div>
              </div>
            </div>

            <div
              class="pt-6 animate-fade-in animation-delay-2000 flex flex-col md:flex-row justify-between gap-4 w-full">
              <!-- Bouton gauche -->
              <button type="button"
                class="h-12 px-8 bg-gray-800 hover:bg-gray-900 text-white rounded-md w-full md:w-auto flex items-center justify-center gap-2 group shadow-md transition-colors order-1 md:order-none"
                onclick="generateCV()">
                Créer CV
                <svg xmlns="http://www.w3.org/2000/svg"
                  class="w-4 h-4 transform group-hover:-translate-y-0.5 transition-transform" viewBox="0 0 24 24"
                  fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" />
                  <polyline points="14 2 14 8 20 8" />
                </svg>
              </button>

              <!-- Bouton droit -->
              <button type="submit"
                class="h-12 px-8 btn-gradient rounded-md w-full md:w-auto flex items-center justify-center gap-2 group shadow-md order-2 md:order-none">
                Enregistrer le profil
                <svg xmlns="http://www.w3.org/2000/svg"
                  class="w-4 h-4 transform group-hover:translate-x-1 transition-transform" viewBox="0 0 24 24"
                  fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M5 12h14" />
                  <path d="m12 5 7 7-7 7" />
                </svg>
              </button>
            </div>
        </div>
        </form>
        

      </div>
      </div>
    </section>
  </main>
  <script>


    async function saveBioToDB(event) {
    event.preventDefault(); // ✅ Prevents form submission

      const bioText = document.getElementById('result').innerText; // Get text content
      const userId = localStorage.getItem('userId');
      if (!bioText.trim()) {
        alert("Bio cannot be empty.");
        return;
      }

      try {
        const response = await fetch(`/save-bio/${userId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ bio: bioText })
        });

        const result = await response.json();
        if (result.success) {
          alert("Bio saved to database successfully!");
        } else {
          alert("Failed to save bio.");
        }
      } catch (err) {
        alert("Error saving bio.");
        console.error("Error:", err);
      }
    }

    async function generateBio(event) {
          event.preventDefault(); // ✅ Prevents form submission

      const bio = document.getElementById('bio').value;
      const resultDiv = document.getElementById('result');

      if (!bio.trim()) {
        resultDiv.textContent = "Veuillez entrer un texte.";
        resultDiv.classList.remove('hidden');
        return;
      }

      resultDiv.textContent = "Génération en cours...";
      resultDiv.classList.remove('hidden');

      try {
        const response = await fetch('/generate-bio', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ bio })  // Ensure this is sending the bio correctly
        });

        const data = await response.json();
        resultDiv.textContent = data.result;
      } catch (err) {
        resultDiv.textContent = "Erreur lors de la génération.";
        console.error("Error:", err);
      }
    }


  </script>
  <script>
    const button = document.getElementById('profileButton');
    const menu = document.getElementById('menu');

    button.addEventListener('click', () => {
      menu.classList.toggle('hidden');
    });

    // Fermer le menu si on clique ailleurs
    document.addEventListener('click', (event) => {
      if (!button.contains(event.target) && !menu.contains(event.target)) {
        menu.classList.add('hidden');
      }
    });

    function updateProfilePicture() {
      const fileInput = document.getElementById('upload_profile');
      const profileImg = document.getElementById('profile-img'); // Image principale
      const profileBtnImg = document.getElementById('profile-btn-img'); // Image dans le bouton

      const file = fileInput.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          profileImg.src = e.target.result; // Met à jour l’image principale
          profileBtnImg.src = e.target.result; // Met à jour l’image du bouton
        };
        reader.readAsDataURL(file);
      }
    }
    document.addEventListener("DOMContentLoaded", function () {
      const userId = localStorage.getItem("userId");
      if (!userId) {
        alert("Utilisateur non connecté");
        return window.location.href = "/login";
      }

      console.log(`ID utilisateur récupéré : ${userId}`);

      // Récupération des données utilisateur
      fetch(`http://localhost:3001/profil/${userId}`)
        .then(response => {
          if (!response.ok) throw new Error('Erreur réseau');
          return response.json();
        })
        .then(result => {
          console.log("Données reçues:", result);

          // Peuplement des champs
          document.getElementById("nom").value = result.nom || "";
          document.getElementById("prenom").value = result.prenom || "";
          document.getElementById("email").value = result.email || "";
          document.getElementById("domaine").value = result.domaine || "";
          document.getElementById("gouvernorat").value = result.gouvernorat || "";
          document.getElementById("telephone").value = result.telephone || "";
          document.getElementById("bio").value = result.bio || "";
        })
        .catch(error => {
          console.error("Erreur:", error);
          alert("Erreur lors du chargement des données.");
        });

      // Récupération du formulaire
      const form = document.getElementById("profilForm"); // Assure-toi que l'ID est correct

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Récupération des valeurs du formulaire
        const formData = {
          prenom: document.getElementById("prenom").value,
          nom: document.getElementById("nom").value,
          email: document.getElementById("email").value,
          telephone: document.getElementById("telephone").value,
          domaine: document.getElementById("domaine").value,
          experience: document.getElementById("experience").value,
          diplome: document.getElementById("diplome").value,
          gouvernorat: document.getElementById("gouvernorat").value,
          bio: document.getElementById('result').innerText,
 skills: Alpine.$data(form).skills,
          langues: Array.from(document.querySelectorAll("input[name='languages']:checked")).map(l => l.value)
        };

        try {
          const response = await fetch(`/profil/${userId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formData)
          });

          const result = await response.json();

          if (!response.ok) throw new Error(result.error);

          // Store domain in localStorage when profile is updated
          if (formData.domaine) {
            localStorage.setItem("domain", formData.domaine);
          }

          alert(result.message);
          window.location.reload();

        } catch (error) {
          alert("Erreur : " + error.message);
        }
      });
    });




    function generateCV() {
      const form = document.getElementById("profilForm"); // Assure-toi que l'ID est correct

      const formData = {
        prenom: document.getElementById('prenom').value,
        nom: document.getElementById('nom').value,

        bio: document.getElementById('result').innerText,
        email: document.getElementById('email').value,
        telephone: document.getElementById('telephone').value,
        gouvernorat: document.getElementById('gouvernorat').value,
        experience: document.getElementById('experience').value,
        skills:
        
        Alpine.$data(form).skills,
        langues: Array.from(document.querySelectorAll('input[name="languages"]:checked'))
          .map(l => l.value)
      };

      fetch('/api/generate-cv', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json', // Changement important
        },
        body: JSON.stringify(formData) // Envoi en JSON
      })
        .then(response => {
          if (!response.ok) {
            return response.json().then(err => { throw new Error(err.error); });
          }
          return response.blob();
        })
        .then(blob => {
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `CV_${formData.prenom}_${formData.nom}.pdf`;
          a.click();
          window.URL.revokeObjectURL(url);
        })
        .catch(error => {
          console.error('Erreur:', error);
          alert(`Erreur: ${error.message}`);
        });
    }


  </script>


  <script>
    document.addEventListener('alpine:init', () => {
  Alpine.store('skills', ['JavaScript', 'React', 'Node.js', 'HTML/CSS']);
});

  </script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const improveBioBtn = document.getElementById('improveBioBtn');
      const bioTextarea = document.getElementById('bio');

      async function improveBio() {
        const userDescription = bioTextarea.value.trim();

        if (!userDescription) {
          alert('Veuillez écrire quelque chose avant de corriger !');
          return;
        }

        try {
          improveBioBtn.disabled = true;
          improveBioBtn.textContent = 'Correction en cours...';

          const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
            method: "POST",
            headers: {
              "Authorization": "Bearer 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",
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              "model": "google/gemini-2.0-flash-lite-001",
              "messages": [{
                "role": "user",
                "content": [{
                  "type": "text",
                  "text": `Corrige cette phrase en français (réponds uniquement avec la phrase corrigée sans commentaires) : ${userDescription}`
                }]
              }]
            })
          });

          const data = await response.json();
          const correctedText = data.choices[0].message.content;

          bioTextarea.value = correctedText;
          bioTextarea.focus();

        } catch (error) {
          console.error('Erreur:', error);
          alert('Une erreur est survenue lors de la correction');
        } finally {
          improveBioBtn.disabled = false;
          improveBioBtn.textContent = 'Envoyer';
        }
      }

      improveBioBtn.addEventListener('click', improveBio);
    });
  </script>
  <!-- Footer -->
  {{>footer }}
</body>

</html>