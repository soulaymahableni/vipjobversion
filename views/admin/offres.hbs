<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Offre Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>


</head>
<body class="bg-gray-100">

  <div class="flex h-screen">
    <!-- Sidebar -->
    {{> sidebar }} <!-- Include sidebar partial -->

    <!-- Main Content -->
    <div class="flex-1 flex flex-col">
      <!-- Header -->
      {{> header }} <!-- Include header partial -->

      <!-- Content Section -->
      <main class="p-6">
        <div class="bg-white shadow p-4 flex justify-between items-center">
          <h1 class="text-xl font-semibold">Offres Management</h1>
          <button id="addOffreBtn" class="bg-green-600 text-white px-4 py-2 rounded-lg shadow-md hover:bg-green-700 flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
      <path d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
    </svg>
            Ajouter Offre</button>
        </div>
        
        <div class="bg-white p-6 shadow rounded-lg mt-4">
          <table class="w-full text-left border-collapse">
            <thead>
  <tr class="bg-gray-200 text-gray-600">
    <th class="p-3 border">Titre</th>
    <th class="p-3 border">Description</th>
    <th class="p-3 border">Date de création</th>
    <th class="p-3 border">Date de fin</th>
    <th class="p-3 border">Domaine</th>
    <th class="p-3 border">Type de Contrat</th>
    <th class="p-3 border">Localisation</th>
    <th class="p-3 border">Nb Candidats</th>
    <th class="p-3 border">Actions</th>
  </tr>
</thead>

            <tbody id="offreTable" class="bg-white"></tbody>
          </table>

         <!-- Pagination Controls -->
          <div class="flex justify-between items-center mt-4">
            <button id="prevPage" class="px-4 py-2 bg-gray-300 text-gray-700 rounded disabled:opacity-50">Previous</button>
            <span id="pageInfo" class="text-gray-600"></span>
            <button id="nextPage" class="px-4 py-2 bg-gray-300 text-gray-700 rounded disabled:opacity-50">Next</button>
          </div>
        </div>
      </main>
    </div>
  </div>

 

  <div id="addOffreModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
  <div class="bg-blue-50 p-6 rounded-xl shadow-xl w-full max-w-md border border-blue-500 mx-4">
    <h2 class="text-xl font-semibold mb-4 text-blue-600 flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-ogreen-600" viewBox="0 0 20 20" fill="currentColor">
        <path d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
      </svg>
      Ajouter Offre
    </h2>
    <form id="addOffreForm" class="space-y-4">
      <input type="hidden" id="addOffreId" />
      <div class="grid grid-cols-2 gap-4">
        <div class="space-y-4">
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              Titre
            </label>
            <input type="text" id="addTitre" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div class="mb-4">

          <input type="file" id="addImage" name="image" accept="image/*" required />
</div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Date création
            </label>
            <input type="date" id="addDate_creation" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              Domaine
            </label>
            <input type="text" id="addDomaine" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
        </div>
        <div class="space-y-4">
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Date fin
            </label>
            <input type="date" id="addDate_fin" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Contrat
            </label>
            <input type="text" id="addTypeContrat" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              Localisation
            </label>
            <input type="text" id="addLocalisation" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
        </div>
      </div>
      <div>
        <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Description
        </label>
        <textarea id="addDescription" rows="3" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required></textarea>
      </div>
      <div>
        <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" stroke="currentColor" fill="none">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
          Candidats
        </label>
        <input type="number" id="addNbCandidat" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
      </div>
      <div class="flex justify-end space-x-2 pt-4">
        <button type="button" id="closeAddModal" class="px-4 py-2 bg-gray-400 text-white rounded-lg">Annuler</button>
        <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg">Sauvegarder</button>
      </div>
    </form>
  </div>
</div>


  <!-- Update Modal -->
      <div id="updateOffreModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
  <div class="bg-blue-50 p-6 rounded-xl shadow-xl w-full max-w-md border border-blue-500 mx-4">
    <h2 class="text-xl font-semibold mb-4 text-blue-600 flex items-center gap-2">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-600" viewBox="0 0 20 20" fill="currentColor">
        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
      </svg>
      Modifier Offre
    </h2>
    <form id="updateOffreForm" class="space-y-4">
      <input type="hidden" id="updateOffreId" />
      <div class="grid grid-cols-2 gap-4">
        <div class="space-y-4">
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              Titre
            </label>
            <input type="text" id="updateTitre" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Date création
            </label>
            <input type="date" id="updateDate_creation" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              Domaine
            </label>
            <input type="text" id="updateDomaine" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
        </div>
        <div class="space-y-4">
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Date fin
            </label>
            <input type="date" id="updateDate_fin" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" required />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Contrat
            </label>
            <input type="text" id="updateTypeContrat" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" />
          </div>
          <div>
            <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              Localisation
            </label>
            <input type="text" id="updateLocalisation" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" />
          </div>
        </div>
      </div>
      <div>
        <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Description
        </label>
        <textarea id="updateDescription" rows="3" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300"></textarea>
      </div>
      <div>
        <label class="flex items-center gap-2 text-sm text-gray-600 mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
          Candidats
        </label>
        <input type="number" id="updateNbCandidat" class="w-full px-3 py-2 text-sm border rounded-lg focus:ring-2 focus:ring-blue-300" />
      </div>
      <div class="flex justify-end gap-3 pt-4">
        <button type="button" id="closeUpdateModal" class="px-4 py-2 text-sm bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Annuler
        </button>
        <button type="submit" class="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-600 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          Sauvegarder
        </button>
      </div>
    </form>
      </div>
    </div>


<!-- Modal -->

<div id="smsModal" class="modal" style="display:none; position:fixed; top:10%; left:25%;  padding:20px; z-index:1000; width:50%;">
 <!-- Modal Container -->
  <div class="bg-white w-full  p-3 rounded-2xl shadow-lg animate-fade-in space-y-6">
    <!-- Modal Title -->
    <h2 class="text-xl font-semibold text-gray-800 flex items-center gap-2">
      📢 Notifier les Utilisateurs
    </h2>

    <!-- Modal Form -->
    <form id="smsForm" onsubmit="sendSMS(event)" class="space-y-4">
      <!-- User Selection -->
      <div>
        <label for="userSelect" class="block text-sm font-medium text-gray-700 mb-2">
          Sélectionnez les utilisateurs :
        </label>
        <select id="userSelect" multiple size="8"
          class="w-full border border-gray-300 rounded-md p-2 text-sm focus:ring-blue-500 focus:border-blue-500">
          <!-- Options added dynamically -->
        </select>
      </div>

      <!-- Hidden Fields -->
      <input type="hidden" id="modalOffreId" />
      <input type="hidden" id="modalOffreTitle" />
      <input type="hidden" id="modalOffreType" />
      <input type="hidden" id="modalOffreDomaine" />
      <input type="hidden" id="modalOffreLocation" />
      <input type="hidden" id="modalOffreNbCandidat" />
      <input type="hidden" id="modalOffreDateCreation" />
      <input type="hidden" id="modalOffreDateFin" />

      <!-- Modal Footer -->
      <div class="flex justify-end space-x-3 pt-4">
        <button type="button" onclick="closeModal()"
          class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300">
          ❌ Annuler
        </button>
        <button type="submit"
          class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
          📨 Envoyer
        </button>
      </div>
    </form>
  </div>
</div>
</div>


  <script>
    document.getElementById("closeUpdateModal").addEventListener("click", function () {
    document.getElementById("updateOffreModal").classList.add("hidden");
});

    let offres = [];
    let currentPage = 1;
    const offersPerPage = 5;

    const offreTable = document.getElementById('offreTable');
    const addOffreModal = document.getElementById('addOffreModal');
    const updateOffreModal = document.getElementById('updateOffreModal');
    const addOffreForm = document.getElementById('addOffreForm');
    const updateOffreForm = document.getElementById('updateOffreForm');
    const prevPageBtn = document.getElementById('prevPage');
    const nextPageBtn = document.getElementById('nextPage');
    const pageInfo = document.getElementById('pageInfo');

    // Add offer modal
    document.getElementById('addOffreBtn').addEventListener('click', () => {
        addOffreForm.reset();
        addOffreModal.classList.remove('hidden');
    });

    document.getElementById('closeAddModal').addEventListener('click', () => {
        addOffreModal.classList.add('hidden');
    });

    // Fetch offers from the database
    function fetchOffres() {
        fetch('/display-offres') // Adjust the URL to your actual API endpoint
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    offres = data.offres;
                    renderOffres();
                }
            })
            .catch(error => console.error('Error fetching offers:', error));
    }
addOffreForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const newOffer = {
        titre: document.getElementById('addTitre').value,
        description: document.getElementById('addDescription').value,
        date_creation: document.getElementById('addDate_creation').value,
        date_fin: document.getElementById('addDate_fin').value,
        domaine: document.getElementById('addDomaine').value,
        type_contrat: document.getElementById('addTypeContrat').value,  
        localisation: document.getElementById('addLocalisation').value,
        nb_candidat: document.getElementById('addNbCandidat').value,
        status:1,
        image: document.getElementById('addImage').value
    };
    
  const formData = new FormData();

  formData.append('titre', document.getElementById('addTitre').value);
  formData.append('description', document.getElementById('addDescription').value);
  formData.append('date_creation', document.getElementById('addDate_creation').value);
  formData.append('date_fin', document.getElementById('addDate_fin').value);
  formData.append('domaine', document.getElementById('addDomaine').value);
  formData.append('type_contrat', document.getElementById('addTypeContrat').value);
  formData.append('localisation', document.getElementById('addLocalisation').value);
  formData.append('nb_candidat', document.getElementById('addNbCandidat').value);
  formData.append('status', 1);
  formData.append('image', document.getElementById('addImage').files[0]);

    // Call API to add offer
    fetch('/create-offre', {
        method: 'POST',
       body: formData, // Pas de content-type ici, il est automatiquement défini

    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            fetchOffres();
            addOffreModal.classList.add('hidden'); // Close modal
             // SweetAlert success message
            Swal.fire({
                icon: 'success',
                title: 'Offre ajoutée avec succès',
                showConfirmButton: false,
                timer: 1500
            });
        }
    })
    .catch(error => console.error('Error adding offer:', error));
});


function formatDateToDDMMYYYY(dateStr) {
    if (!dateStr) return "";
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatDateToYYYYMMDD(dateStr) {
    if (!dateStr) return "";
    const date = new Date(dateStr);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${year}-${month}-${day}`;
}

function renderOffres() {
    offreTable.innerHTML = '';
    const startIndex = (currentPage - 1) * offersPerPage;
    const endIndex = startIndex + offersPerPage;
    const displayedOffres = offres.slice(startIndex, endIndex);

    displayedOffres.forEach((offre, index) => {
        const row = `
            <tr class="border">
                <td class="p-3 border">${offre.titre}</td>
                <td class="p-3 border">${offre.description}</td>
                <td class="p-3 border">${offre.date_creation}</td>
                <td class="p-3 border">${offre.date_fin}</td>
                <td class="p-3 border">${offre.domaine}</td>
                <td class="p-3 border">${offre.type_contrat}</td>
                <td class="p-3 border">${offre.localisation}</td>
                <td class="p-3 border">${offre.nb_candidat}</td>
                
                <td class="p-3 border">
                    <button class="bg-blue-500 text-white px-2 py-1 rounded edit-btn" data-id="${offre.id}">Edit</button>
                    <button class="bg-red-500 text-white px-2 py-1 rounded delete-btn" data-id="${offre.id}">Delete</button>
                </td>
             
            </tr>
        `;
        offreTable.innerHTML += row;
    });
document.querySelectorAll('.send-sms-btn').forEach(button => {
  button.addEventListener('click', function () {
    // Récupération des attributs supplémentaires
    const offreId = this.getAttribute('data-id');
    const offreTitle = this.getAttribute('data-title');
    const offreDomaine = this.getAttribute('data-domaine');
    const offreType = this.getAttribute('data-type');
    const offreLocation = this.getAttribute('data-localisation');
    const offreCandidates = this.getAttribute('data-candidats');
    const offreStartDate = this.getAttribute('data-start-date');
    const offreEndDate = this.getAttribute('data-end-date');

    // Vérification de l'existence des attributs requis
    if (!offreId || !offreTitle || !offreDomaine || !offreType || !offreLocation) {
      console.error('Erreur: Un ou plusieurs attributs requis sont manquants.');
      alert('Détails de l\'offre incomplets. Veuillez réessayer.');
      return;
    }

    // Log des valeurs récupérées
    console.log(`Offre ID: ${offreId}, Titre: ${offreTitle}, Domaine: ${offreDomaine}, Type: ${offreType}, Localisation: ${offreLocation}`);
    
    // Appel de la fonction confirmAndSendSMS avec tous les paramètres
    confirmAndSendSMS(
      offreId, offreTitle, offreDomaine, offreType, offreLocation, 
      offreCandidates, offreStartDate, offreEndDate
    );
  });
});


 
    pageInfo.innerText = `Page ${currentPage}`;
    prevPageBtn.disabled = currentPage === 1;
    nextPageBtn.disabled = endIndex >= offres.length;
}

function editOffre(id) {
    const offre = offres.find(o => o.id == id);
    if (!offre) {
        Swal.fire("Erreur!", "Offre non trouvée.", "error");
        return;
    }


    document.getElementById('updateOffreId').value = offre.id;
    document.getElementById('updateTitre').value = offre.titre;
    document.getElementById('updateDescription').value = offre.description;
    document.getElementById('updateDate_creation').value = formatDateToYYYYMMDD(offre.date_creation);
    document.getElementById('updateDate_fin').value = formatDateToYYYYMMDD(offre.date_fin);
    document.getElementById('updateDomaine').value = offre.domaine;
        document.getElementById('updateTypeContrat').value = offre.type_contrat;
    document.getElementById('updateLocalisation').value = offre.localisation;
    document.getElementById('updateNbCandidat').value = offre.nb_candidat;


    updateOffreModal.classList.remove('hidden');
}

updateOffreForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const id = document.getElementById('updateOffreId').value;
    const updatedOffer = {
        titre: document.getElementById('updateTitre').value,
        description: document.getElementById('updateDescription').value,
        date_creation: document.getElementById('updateDate_creation').value,
        date_fin: document.getElementById('updateDate_fin').value,
        domaine: document.getElementById('updateDomaine').value,
        type_contrat: document.getElementById('updateTypeContrat').value,
        localisation: document.getElementById('updateLocalisation').value,
        nb_candidat: document.getElementById('updateNbCandidat').value
    };

    // Call API to update offer
    fetch(`/update-offre/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedOffer)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const index = offres.findIndex(o => o.id == id);
            offres[index] = data.offre;
          fetchOffres();
            updateOffreModal.classList.add('hidden'); // Close modal
             // SweetAlert success message
            Swal.fire({
                icon: 'success',
                title: 'Offer Updated Successfully',
                showConfirmButton: false,
                timer: 1500
            });
        }
    })
    .catch(error => console.error('Error updating offer:', error));
});

    // Render offers with pagination
    function renderOffres() {
        const start = (currentPage - 1) * offersPerPage;
        const paginatedOffers = offres.slice(start, start + offersPerPage);

        offreTable.innerHTML = paginatedOffers.map(offre => `
            <tr class="border">
                <td class="p-3 border">${offre.titre}</td>
                <td class="p-3 border">${offre.description}</td>
                <td class="p-3 border">${ formatDateToYYYYMMDD(offre.date_creation)}</td>
                <td class="p-3 border">${ formatDateToYYYYMMDD(offre.date_fin)}</td>
                <td class="p-3 border">${offre.domaine}</td>
                    <td class="p-3 border">${offre.type_contrat}</td>
                <td class="p-3 border">${offre.localisation}</td>
                <td class="p-3 border">${offre.nb_candidat}</td>
                <td class="p-3 border">
  <div class="flex items-center gap-2">
    <!-- Bouton Edit -->
    <button 
      class="bg-yellow-600 text-white px-2 py-1 rounded-md hover:bg-yellow-700 flex items-center justify-center"
      onclick="editOffre('${offre.id}')"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
        <path d="M16.862 3.487a1.657 1.657 0 012.343 0l1.308 1.308a1.657 1.657 0 010 2.343l-1.497 1.497-3.65-3.65 1.496-1.497zM3 16.25V21h4.75l10.458-10.458-4.75-4.75L3 16.25z"/>
    </svg>
    </button>

    <!-- Bouton Delete -->
    <button 
      class="bg-red-600 text-white px-2 py-1 rounded-md hover:bg-red-700 flex items-center justify-center"
      onclick="deleteOffre('${offre.id}')"
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        class="h-4 w-4" 
        viewBox="0 0 24 24" 
        fill="currentColor"
      >
        <path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zm9 16H6V8h12z"/>
      </svg>
   <button 
  class="bg-blue-600 text-white px-2 py-1 rounded-md hover:bg-blue-700 flex items-center justify-center"
  onclick="confirmAndSendSMS('${offre.id}', '${offre.titre}, ${offre.domaine}, ${offre.type_contrat}, ${offre.localisation} ${offre.date_creation}, ${offre.date_fin}')"
>
  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 100 100" fill="currentColor">
    <!-- Téléphone -->
    <rect x="20" y="10" width="60" height="80" rx="10" fill="#fff"/>
    <!-- Écran -->
    <rect x="25" y="15" width="50" height="60" rx="5" fill="#4CAF50"/>
    <!-- Messages -->
    <rect x="30" y="25" width="40" height="15" rx="3" fill="#fff"/>
    <rect x="30" y="45" width="35" height="15" rx="3" fill="#e0f0ff"/>
    <!-- Icône d'envoi -->
    <circle cx="70" cy="70" r="12" fill="#4CAF50"/>
    <path d="M70 65L70 75 M65 70L75 70" stroke="white" stroke-width="2"/>
    <path d="M70 70L75 67" stroke="white" stroke-width="2" fill="none"/>
    <!-- Détails téléphone -->
    <circle cx="50" cy="85" r="3" fill="#333"/>
    <rect x="40" y="5" width="20" height="3" rx="1" fill="#333"/>
    <circle cx="50" cy="8" r="1" fill="black"/>
  </svg>
</button>
    </button>
  </div>
</td>
            </tr>
        `).join('');
        document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${Math.ceil(offres.length / offersPerPage)}`;

    }

    document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            renderOffres();
        }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
        if (currentPage < Math.ceil(offres.length / offersPerPage)) {
            currentPage++;
            renderOffres();
        }
    });

function confirmAndSendSMS(offreId, offreTitle, offreDomaine, offreType, offreLocation, offreStartDate, offreEndDate) {
  // Fetch users for SMS notification
  fetch("/users-for-sms")
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        const userSelect = document.getElementById("userSelect");
        userSelect.innerHTML = ""; // Clear existing options
        data.users.forEach(user => {
          const option = document.createElement("option");
          option.value = user.numero_telephone;
          option.text = `${user.nom} (${user.numero_telephone}) (${user.email})`;
          userSelect.appendChild(option);
        });

        // Set the hidden input fields with the offer details
        document.getElementById("modalOffreTitle").value = offreTitle;
        document.getElementById("modalOffreDomaine").value = offreDomaine || "";  // Default to empty if undefined
        document.getElementById("modalOffreType").value = offreType || "";  // Default to empty if undefined
        document.getElementById("modalOffreLocation").value = offreLocation || "";  // Default to empty if undefined

        // Display the modal
        document.getElementById("smsModal").style.display = "block";
      } else {
        alert("Erreur lors du chargement des utilisateurs.");
      }
    });
}

// Close the modal
function closeModal() {
  document.getElementById("smsModal").style.display = "none";
}

// Handle SMS form submission








// Function to extract and return user details as an array of objects
function extractUserDetails() {
  // Get the selected options
  const selectedOptions = Array.from(document.getElementById("userSelect").selectedOptions);
  
  // Process each selected option and extract necessary details
  return selectedOptions.map(option => {
    // Text content of the option (e.g., "ali (+21690130686) (troudichad@gmail.comx)")
    const text = option.text;
    
    // Regex to capture name, phone number, and email
    const regex = /([a-zA-Z\s]+)\s\((\+?\d+)\)\s\(([^)]+)\)/;
    const match = text.match(regex);
    
    // If match is found, extract the details; otherwise, return null
    if (match) {
      const nom = match[1].trim();        // Extracted name
      const phone = match[2];             // Extracted phone number
      const email = match[3];             // Extracted email
      
      // Return the extracted details as an object
      return {
        nom: nom,
        phone: phone,
        email: email
      };
    }
    
    // If regex fails, return null (you can handle this error case as needed)
    return null;
  }).filter(user => user !== null);  // Filter out any nulls from failed matches
}


function sendSMS(event) {
  event.preventDefault(); // Prevent form submission (page reload)

  // Log the start of the SMS sending process
  console.log("Début de l'envoi du SMS...");

// Example: Call the function to extract user details dynamically
const selectedUsers = extractUserDetails();

// Output the extracted details
console.log(selectedUsers);


  const offreId = document.getElementById("modalOffreId").value;
  const offreTitle = document.getElementById("modalOffreTitle").value.trim(); // Ensure there's no leading/trailing whitespace
  const offreDomaine = document.getElementById("modalOffreDomaine").value.trim();
  const offreType = document.getElementById("modalOffreType").value.trim();
  const offreLocation = document.getElementById("modalOffreLocation").value.trim();
  const offreCandidates = document.getElementById("modalOffreNbCandidat").value.trim();
  const offreStartDate = document.getElementById("modalOffreDateCreation").value.trim();
  const offreEndDate = document.getElementById("modalOffreDateFin").value.trim();

  // Log the extracted offer details
  console.log("Détails de l'offre extraits :", {
    offreTitle,
    offreDomaine,
    offreType,
    offreLocation,
    offreCandidates,
    offreStartDate,
    offreEndDate
  });

  // Validate that at least one user is selected
  if (selectedUsers.length === 0) {
    console.warn("Aucun utilisateur sélectionné.");
    alert("Veuillez sélectionner au moins un utilisateur.");
    return;
  }

  // Log the selected users
  console.log("Utilisateurs sélectionnés pour l'envoi du SMS :", selectedUsers);



  // Send selected phone numbers and offer details to the backend
  fetch("/send-sms", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      numbers: selectedUsers,
      offreTitle: offreTitle,
      offreDomaine: offreDomaine,
      offreType: offreType,
      offreLocation: offreLocation,
      offreCandidates: offreCandidates,
      offreStartDate: offreStartDate,
      offreEndDate: offreEndDate
    })
  })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        console.log("SMS envoyé avec succès !");
        alert("SMS envoyé avec succès !");
        closeModal(); // Close modal on success
      } else {
        console.error("Erreur lors de l'envoi du SMS :", data.message);
        alert("Erreur lors de l'envoi du SMS.");
      }
    })
    .catch(err => {
      console.error("Erreur de connexion ou autre erreur :", err);
      alert("Une erreur est survenue. Veuillez réessayer.");
    });
}












// Function to close the modal (make sure this exists in your code)
function closeModal() {
  document.getElementById("smsModal").style.display = "none";
}




function deleteOffre(id) {
    Swal.fire({
        title: "Es-tu sûr?",
        text: "Vous ne pourrez pas revenir en arrière !",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Oui, supprimez-le !"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/delete-offre/${id}`, {
                method: "DELETE",
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the offres array by removing the deleted offer
                    offres = offres.filter(offre => offre.id !== id);
                    
                    // Explicitly re-render the table to reflect changes
                    fetchOffres(); 

                    Swal.fire(
                        "supprimée",
                        "Votre offre a été supprimée.",
                        "success"
                    );
                } else {
                    Swal.fire(
                        "Erreur!",
                        "Impossible de supprimer l'offre.",
                        "error"
                    );
                }
            })
            .catch(error => {
                console.error("Error:", error);
                Swal.fire("Error!", "An unexpected error occurred.", "error");
            });
        }
    });
}





    fetchOffres();
  </script>

   <script>
    const socket = new WebSocket('ws://localhost:3001');

    socket.onopen = () => {
      console.log('🟢 Connected');
      socket.send('Hello Server!');
    };

    socket.onmessage = (event) => {
      console.log('📨 Message from server:', event.data);
    };

    socket.onerror = (error) => {
      console.error('❌ WebSocket error:', error);
    };

    socket.onclose = () => {
      console.log('🔴 Disconnected');
    };
  </script>



<script>
  const socket = io(); // connects to the backend WebSocket server

  socket.on("connect", () => {
    console.log("🟢 WebSocket connecté");
  });

  socket.on("new-offre-notification", (data) => {
    console.log("🔔 Notification reçue :", data);
    showToast(`📢 Nouvelle offre: <strong>${data.title}</strong> à ${data.location}`);
  });

  function showToast(message) {
    const toast = document.createElement("div");
    toast.innerHTML = message;
    toast.className = "bg-blue-500 text-white px-4 py-2 rounded shadow animate-fadeIn";
    document.getElementById("toast-container").appendChild(toast);

    setTimeout(() => {
      toast.classList.add("opacity-0");
      setTimeout(() => toast.remove(), 500);
    }, 5000);
  }
</script>

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to   { opacity: 1; transform: translateY(0); }
  }
  .animate-fadeIn {
    animation: fadeIn 0.3s ease-out;
  }
</style>

</body>
</html>